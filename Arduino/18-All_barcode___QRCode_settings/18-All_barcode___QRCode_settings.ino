#include <SoftwareSerial.h>
SoftwareSerial mySerial(11, 12);  //Rx=11, Tx=12

//CodeBar-------------------
#define En_CodeBar 0x01
#define Dis_CodeBar 0x00
#define Start_Stop_char 0x00 // 0x00 for Disable Start/Stop character  And 0x02 for Enable Start/Stop character
//--------------------------

byte EAN13[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x2E, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte EAN8[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x2F, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte UPCA[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x30, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte UPCE0[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x31, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte UPCE1[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x32, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};

byte Code128[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x33, 0x01 /*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Code128_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x34, 0x06 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Code128_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x35, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte Code39[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x36, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Code39_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x37, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Code39_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x38, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte Code93[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x39, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Code93_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3A, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Code93_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3B, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte CodeBar[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3C, En_CodeBar + Start_Stop_char, 0xAB, 0xCD};
byte CodeBar_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3D, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte CodeBar_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3E, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte QR_code[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x3F, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};

byte Interleaved_2of5[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x40, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Interleaved_2of5_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x41, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Interleaved_2of5_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x42, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte Industrial_25[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x43, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Industrial_25_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x44, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Industrial_25_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x45, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte Matrix_2_of_5[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x46, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Matrix_2_of_5_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x47, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Matrix_2_of_5_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x48, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte Code11[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x49, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Code11_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4A, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte Code11_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4B, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte MSI[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4C, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte MSI_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4D, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte MSI_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4E, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte RSS_14[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x4F, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Limited_RSS[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x50, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte Expanded_RSS[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x51, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};
byte RSS_min_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x52, 0x00 /*0x00-0xFF：0-255*/, 0xAB, 0xCD};
byte RSS_max_length[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x53, 0xFF /*0x00-0xFF：0-255*/, 0xAB, 0xCD};

byte DM[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x54, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};

byte PDF417[9] = {0x7E, 0x00, 0x08, 0x01, 0x00, 0x55, 0x01/*0x00-0x01：En-Dis*/, 0xAB, 0xCD};


void setup() {
  Serial.begin(115200);
  mySerial.begin(9600);
  
  mySerial.write(EAN13, 9);
  
}

void loop() {
 if (mySerial.available()) {
    String receivedData = mySerial.readStringUntil('\n'); // Read entire data until newline character
    
    Serial.println(receivedData); // Print the data to Serial Monitor
  }
}
